//exp
exp -> term erest
erest -> term erest | -term erest | eps
term -> faktor trest
trest -> * faktor trest | / faktor trest | eps
faktor -> id | zahl | ( exp )

//while
prog -> statement prog_rest
prog_rest -> statement prog_rest

statement -> assignment | selection | whileLoop

assignment -> id OP_ASSIGN exp
selection -> IF cond THEN prog FI | IF cond THEN prog ELSE prog FI
whileLoop -> WHILE cond DO prog OD

OP_ASSIGN = '='

IF -> 'if'
THEN -> 'then'
ELSE -> 'else'
FI -> 'fi'

WHILE -> 'while'
DO -> 'DO'
OD -> 'OD'

exp -> term erest
erest -> term erest | -term erest | eps
term -> faktor trest
trest -> * faktor trest | / faktor trest | eps
faktor -> ID | ZAHL | ( exp )

ID -> [A-Za-z][A-Za-z0-9]*
ZAHL -> [1-9][0-9]*

package grammars;

import core.Grammar;

public class AntlrGrammar extends Grammar {
	public AntlrGrammar() {
		/*Grammar antlrGrammar = new Grammar();
		
		LexerRule grammarToken = antlrGrammar.createTokenInfo("grammar");
		
		grammarToken.addRule("grammar");
		
		LexerRule cToken = antlrGrammar.createTokenInfo("ctrl");
		
		cToken.addRule("\\p{Cntrl}+");
		
		LexerRule wsToken = antlrGrammar.createTokenInfo("ws");
		
		wsToken.addRule("\\s+");
		
		LexerRule upperIdToken = antlrGrammar.createTokenInfo("upperId");
		
		upperIdToken.addRule("[A-Z][A-Za-z0-9]*");
		
		LexerRule lowerIdToken = antlrGrammar.createTokenInfo("lowerId");
		
		lowerIdToken.addRule("[a-z][A-Za-z0-9]*");
		
		LexerRule sepToken = antlrGrammar.createTokenInfo("sep");
		
		sepToken.addRule(";");
		
		LexerRule assignToken = antlrGrammar.createTokenInfo("assign");
		
		assignToken.addRule(Pattern.quote(":"));
		
		LexerRule litToken = antlrGrammar.createTokenInfo("literal");
		
		litToken.addRule("\'[^\']*\'");
		
		LexerRule setLitToken = antlrGrammar.createTokenInfo("setLiteral");
		
		setLitToken.addRule(String.format("%s[^%s]*%s[%s]?", Pattern.quote("["), Pattern.quote("[]"), Pattern.quote("]"), Pattern.quote("+*")));
		
		LexerRule skipArrowToken = antlrGrammar.createTokenInfo("skipArrow");
		
		skipArrowToken.addRule(String.format("%s", Pattern.quote("->")));
		
		LexerRule skipToken = antlrGrammar.createTokenInfo("skip");
		
		skipToken.addRule("skip");
		
		LexerRule orToken = antlrGrammar.createTokenInfo("or");
		
		orToken.addRule(Pattern.quote("|"));
		
		File gFile = new File(workDir, "Grammar\\Hello.g4");
		
		//FileInputStream gf = new FileInputStream(new FileReader(gFile, StandardCharsets.UTF_8));
		
		byte[] gbs = Files.readAllBytes(gFile.toPath());
		
		String gs = new String(gbs, StandardCharsets.UTF_8);
		
		new Lexer(antlrGrammar).tokenize(gs).print();*/
		
		//gf.close();
	}
}

		/*//predictive parser table
		PredictiveParserTable ruleMap = getPredictiveParserTable();

		ruleMap.set(boolExpRule, opNegateRule, PATTERN_BOOL_OR);
		ruleMap.set(boolExpRule, zahlRule, PATTERN_BOOL_OR);
		ruleMap.set(boolExpRule, idRule, PATTERN_BOOL_OR);

		ruleMap.set(boolOrRule, opNegateRule, PATTERN_BOOL_AND_BOOL_OR_REST);
		ruleMap.set(boolOrRule, zahlRule, PATTERN_BOOL_AND_BOOL_OR_REST);
		ruleMap.set(boolOrRule, idRule, PATTERN_BOOL_AND_BOOL_OR_REST);

		ruleMap.set(boolOrRestRule, opOrRule, PATTERN_OP_OR_BOOL_OR);
		ruleMap.set(boolOrRestRule, LexerRule.EPSILON, boolOrRestRule.getRulePattern(1));

		ruleMap.set(boolAndRule, opNegateRule, PATTERN_BOOL_ELEMENTARY_BOOL_AND_REST);
		ruleMap.set(boolAndRule, zahlRule, PATTERN_BOOL_ELEMENTARY_BOOL_AND_REST);
		ruleMap.set(boolAndRule, idRule, PATTERN_BOOL_ELEMENTARY_BOOL_AND_REST);

		ruleMap.set(boolAndRestRule, opAndRule, PATTERN_OP_AND_BOOL_AND);
		ruleMap.set(boolAndRestRule, LexerRule.EPSILON, boolAndRestRule.getRulePattern(1));

		ruleMap.set(boolElementaryRule, zahlRule, PATTERN_EXP_OP_COMPARE_EXP);
		ruleMap.set(boolElementaryRule, idRule, PATTERN_EXP_OP_COMPARE_EXP);
		ruleMap.set(boolElementaryRule, boolLiteralRule, PATTERN_BOOL_LITERAL);*/
		
				/*//predictive parser table
		PredictiveParserTable ruleMap = getPredictiveParserTable();
		
		ruleMap.set(expRule, zahlRule, expRule.getRulePattern(0));
		ruleMap.set(expRule, idRule, expRule.getRulePattern(0));
		ruleMap.set(expRule, parenOpenRule, expRule.getRulePattern(0));
		
		ruleMap.set(erestRule, opPlusRule, erestRule.getRulePattern(0));
		ruleMap.set(erestRule, opMinusRule, erestRule.getRulePattern(1));
		ruleMap.set(erestRule, parenCloseRule, erestRule.getRulePattern(2));
		ruleMap.set(erestRule, LexerRule.EPSILON, erestRule.getRulePattern(2));
		
		ruleMap.set(termRule, zahlRule, termRule.getRulePattern(0));
		ruleMap.set(termRule, idRule, termRule.getRulePattern(0));
		ruleMap.set(termRule, parenOpenRule, termRule.getRulePattern(0));
		
		ruleMap.set(trestRule, opPlusRule, trestRule.getRulePattern(2));
		ruleMap.set(trestRule, opMinusRule, trestRule.getRulePattern(2));
		ruleMap.set(trestRule, opMultRule, trestRule.getRulePattern(0));
		ruleMap.set(trestRule, opDivRule, trestRule.getRulePattern(1));
		ruleMap.set(trestRule, parenCloseRule, trestRule.getRulePattern(2));
		ruleMap.set(trestRule, LexerRule.EPSILON, erestRule.getRulePattern(2));
		
		ruleMap.set(faktorRule, zahlRule, faktorRule.getRulePattern(0));
		ruleMap.set(faktorRule, idRule, faktorRule.getRulePattern(0));
		ruleMap.set(faktorRule, parenOpenRule, faktorRule.getRulePattern(0));
		
		ruleMap.set(faktorrestRule, opPowRule, faktorrestRule.getRulePattern(0));
		ruleMap.set(faktorrestRule, LexerRule.EPSILON, faktorrestRule.getRulePattern(1));

		ruleMap.set(powRule, idRule, powRule.getRulePattern(0));
		ruleMap.set(powRule, zahlRule, powRule.getRulePattern(0));
		ruleMap.set(powRule, parenOpenRule, powRule.getRulePattern(0));

		ruleMap.set(powrestRule, opFactorialRule, powrestRule.getRulePattern(0));
		ruleMap.set(powrestRule, LexerRule.EPSILON, powrestRule.getRulePattern(1));

		ruleMap.set(lowRule, idRule, lowRule.getRulePattern(0));
		ruleMap.set(lowRule, zahlRule, lowRule.getRulePattern(1));
		ruleMap.set(lowRule, parenOpenRule, lowRule.getRulePattern(2));*/
		
				/*//predictive parser table
		PredictiveParserTable ruleMap = getPredictiveParserTable();
		
		ruleMap.set(hoareExpRule, curlyOpenRule, hoareExpRule.getRulePattern(0));*/
		
				/*//predictive parser table
		PredictiveParserTable ruleMap = getPredictiveParserTable();
		
		//extend while
		ruleMap.set(progRule, preLexRule, progHoareBlockPattern);
		ruleMap.set(hoareBlockRule, preLexRule, hoareBlockRule.getRulePattern(0));
		ruleMap.set(preRule, preLexRule, preRule.getRulePattern(0));
		ruleMap.set(postRule, postLexRule, postRule.getRulePattern(0));*/
		
				/*//predictive parser table
		PredictiveParserTable ruleMap = getPredictiveParserTable();
		
		ruleMap.set(progRule, opSkipRule, PATTERN_PROG_SKIP);
		ruleMap.set(progRule, idRule, PATTERN_PROG_ASSIGN);
		ruleMap.set(progRule, ifRule, PATTERN_PROG_SELECTION);
		ruleMap.set(progRule, whileRule, PATTERN_PROG_LOOP);
		
		ruleMap.set(prestRule, statementSeparatorRule, PATTERN_PREST_PROG);
		ruleMap.set(prestRule, LexerRule.EPSILON, prestRule.getRulePattern(1));
		
		ruleMap.set(skipRule, opSkipRule, PATTERN_SKIP);
		
		ruleMap.set(assignRule, idRule, PATTERN_ASSIGN);
		
		ruleMap.set(selectionRule, ifRule, PATTERN_SELECTION);

		ruleMap.set(selectionElseRule, fiRule, selectionElseRule.getRulePattern(0));
		ruleMap.set(selectionElseRule, elseRule, PATTERN_SELECTION_ELSE);
		
		ruleMap.set(whileLoopRule, whileRule, PATTERN_LOOP);*/